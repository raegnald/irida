///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                        Irida's Standard Library                           //
//                            [Ronaldo Gligan]                               //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

// C standard input/output bindings

proc strlen
| extern strlen
| pop rdi
| call strlen
| push rax
end

proc printi 
| extern printf
  "%d"
| pop rdi         ; format
| pop rsi         ; number to print
| xor rax, rax    ; no more args
| call printf 
end

proc printni 
| extern printf
  "%d\n"
| pop rdi         ; format
| pop rsi         ; number to print
| xor rax, rax    ; no more args
| call printf 
end

proc prints
| extern printf
    "%s"
| pop rdi         ; format
| pop rsi         ; number to print
| xor rax, rax    ; no more args
| call printf 
end

proc printns
| extern printf
  "%s\n"
| pop rdi         ; format
| pop rsi         ; number to print
| xor rax, rax    ; no more args
| call printf 
end

proc puts
| extern puts
| pop rdi
| call puts
end


///////////////////////////////////////////////////////////////////////////////

// Operations

proc add 
| pop rax
| pop rbx
| add rax, rbx
| push rax
end
 
proc sub 
| pop rax
| pop rbx
| sub rax, rbx
| push rax
end

proc subI
// Subtract the inverse way
| pop rbx
| pop rax
| sub rax, rbx
| push rax
end

proc mul
| pop rax
| pop rbx
| mul rbx
| push rax
end

proc div
| pop rax
| pop rbx
| xor rax, rbx
| div rbx
| push rax
end

proc divI
// Divide the inverse way
| pop rbx
| pop rax
| div rbx
| push rax
end

proc succ
  1 add
end

proc pred
  -1 add
end

proc is_zero
  0 eq
end

// Logic

proc eq 
| mov rcx, 0
| mov rdx, 1
| pop rax
| pop rbx
| cmp rax, rbx
| cmove rcx, rdx
| push rcx
end


// Stack operations

proc drop 
| pop rax
end

proc ddrop
  drop drop
end

proc dupl 
| pop rax
| push rax
| push rax
end

proc ddupl
  dupl dupl
end

proc swap
| pop rax
| pop rbx
| push rax
| push rbx
end



proc nothing 
| nop
end



// Syscalls

proc exit 
| mov rax, 60
| pop rdi
| syscall
end

